import React, { useState, useEffect } from "react";
import { Cpu, BarChart } from "lucide-react";

import {
  TrendingUp,
  Activity,
  Users,
  Zap,
  ArrowUpRight,
  Menu,
  X,
  Rocket,
} from "lucide-react";

import cloudbustersLogo from "./assets/cloudbusters.jpeg";

// URL de la imagen cargada por el usuario (Cloudbusters)
const CLOUDBUSTERS_LOGO_URL = cloudbustersLogo;

// --- Componente de Efecto Estelar (Partículas CSS) ---
const AtmosphereEffect = () => (
  // Fondo de espacio profundo y fijo
  <div className="absolute top-0 left-0 w-full h-full pointer-events-none overflow-hidden z-0 bg-gray-950">
    <style jsx="true">{`
      /* Animación de brillo y movimiento lento de las "estrellas" */
      @keyframes twinkle {
        0%,
        100% {
          transform: translate(0, 0) scale(0.8);
          opacity: 0.6;
        }
        50% {
          transform: translate(-10px, 15px) scale(1.2);
          opacity: 1;
        }
      }
      @keyframes floatSlow {
        0% {
          transform: translate(0, 0);
        }
        50% {
          transform: translate(15px, 25px);
        }
        100% {
          transform: translate(0, 0);
        }
      }

      .star-system span {
        position: absolute;
        width: 3px;
        height: 3px;
        background-color: rgba(255, 255, 255, 0.8); /* Estrellas blancas */
        border-radius: 50%;
        box-shadow: 0 0 5px rgba(255, 255, 255, 0.5); /* Sombra para simular brillo */
        animation: twinkle 10s infinite alternate ease-in-out,
          floatSlow 30s infinite ease-in-out;
        opacity: 0.8;
      }

      /* Posicionamiento aleatorio de las estrellas */
      .star-system span:nth-child(1) {
        top: 10%;
        left: 5%;
        animation-duration: 8s;
        animation-delay: 0s;
      }
      .star-system span:nth-child(2) {
        top: 25%;
        left: 20%;
        animation-duration: 12s;
        animation-delay: 1s;
      }
      .star-system span:nth-child(3) {
        top: 40%;
        left: 10%;
        animation-duration: 9s;
        animation-delay: 2s;
      }
      .star-system span:nth-child(4) {
        top: 60%;
        left: 35%;
        animation-duration: 15s;
        animation-delay: 3s;
      }
      .star-system span:nth-child(5) {
        top: 80%;
        left: 50%;
        animation-duration: 7s;
        animation-delay: 4s;
      }
      .star-system span:nth-child(6) {
        top: 5%;
        left: 60%;
        animation-duration: 18s;
        animation-delay: 5s;
      }
      .star-system span:nth-child(7) {
        top: 50%;
        left: 85%;
        animation-duration: 11s;
        animation-delay: 6s;
      }
      .star-system span:nth-child(8) {
        top: 75%;
        left: 70%;
        animation-duration: 13s;
        animation-delay: 7s;
      }
      .star-system span:nth-child(9) {
        top: 90%;
        left: 95%;
        animation-duration: 16s;
        animation-delay: 8s;
      }
      .star-system span:nth-child(10) {
        top: 30%;
        left: 75%;
        animation-duration: 10s;
        animation-delay: 9s;
      }
      /* Agrega más estrellas para densidad */
      .star-system span:nth-child(11) {
        top: 15%;
        left: 45%;
        animation-duration: 14s;
        animation-delay: 1s;
      }
      .star-system span:nth-child(12) {
        top: 65%;
        left: 15%;
        animation-duration: 17s;
        animation-delay: 5s;
      }
      .star-system span:nth-child(13) {
        top: 45%;
        left: 55%;
        animation-duration: 9s;
        animation-delay: 2s;
      }
      .star-system span:nth-child(14) {
        top: 20%;
        left: 80%;
        animation-duration: 12s;
        animation-delay: 4s;
      }
      .star-system span:nth-child(15) {
        top: 85%;
        left: 5%;
        animation-duration: 15s;
        animation-delay: 6s;
      }
    `}</style>

    {/* Sistema de Partículas/Estrellas */}
    <div className="star-system w-full h-full">
      <span></span>
      <span></span>
      <span></span>
      <span></span>
      <span></span>
      <span></span>
      <span></span>
      <span></span>
      <span></span>
      <span></span>
      <span></span>
      <span></span>
      <span></span>
      <span></span>
      <span></span>
    </div>

    {/* Brillo de fondo sutil (simulando nebulosa lejana) */}
    <div className="absolute top-0 left-0 w-full h-full pointer-events-none overflow-hidden z-10">
      <div className="absolute top-1/4 left-1/4 w-96 h-96 bg-indigo-500 opacity-5 rounded-full mix-blend-screen filter blur-3xl animate-pulse"></div>
      <div className="absolute bottom-1/4 right-1/4 w-64 h-64 bg-cyan-500 opacity-5 rounded-full mix-blend-screen filter blur-3xl animate-pulse delay-500"></div>
    </div>
  </div>
);

// Componente de Utilidad para formatear números de forma limpia
const formatNumber = (num) => {
  if (num >= 1000) {
    return (num / 1000).toFixed(1) + "k";
  }
  return num;
};

// Componente de Tarjeta de Métrica Animada (Tema oscuro)
const MetricCard = ({ title, value, unit, icon: Icon, change }) => {
  const isPositive = change >= 0;

  return (
    <div
      className="
      relative bg-gray-800/70 p-6 rounded-2xl shadow-2xl backdrop-blur-sm border border-gray-700
      transition duration-300 ease-in-out transform hover:scale-[1.02] hover:shadow-cyan-500/20
      w-full
    "
    >
      <div className="flex items-center justify-between">
        <h3 className="text-sm font-medium text-gray-400 uppercase tracking-widest">
          {title}
        </h3>
        <Icon className="w-5 h-5 text-cyan-400" />
      </div>

      <div className="mt-4 flex flex-col">
        <div className="text-4xl font-extrabold text-white">
          {formatNumber(value)}
          {unit}
        </div>
        <div
          className={`mt-2 flex items-center text-sm font-semibold ${
            isPositive ? "text-green-400" : "text-red-400"
          }`}
        >
          <ArrowUpRight
            className={`w-4 h-4 mr-1 transform ${
              isPositive ? "rotate-0" : "rotate-180 text-red-400"
            }`}
          />
          {change.toFixed(1)}%
          <span className="ml-2 font-normal text-gray-400">vs. mes pasado</span>
        </div>
      </div>
    </div>
  );
};

// --- Componente de Barra de Navegación ---
const Navbar = () => {
  const [isOpen, setIsOpen] = useState(false);

  const navItems = [
    { name: "Datos", icon: BarChart },
    { name: "Proyectos", icon: Cpu },
    { name: "Misión", icon: Rocket },
  ];

  return (
    <nav className="fixed top-0 left-0 w-full z-50 bg-gray-900/80 backdrop-blur-md shadow-lg border-b border-gray-800">
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <div className="flex items-center justify-between h-16">
          {/* Logo/Título principal */}
          <div className="flex items-center">
            <div className="flex-shrink-0">
              <span className="text-2xl font-bold text-white tracking-wider">
                Cloud<span className="text-cyan-400">Busters</span>
              </span>
            </div>
          </div>

          {/* Elementos de escritorio */}
          <div className="hidden md:block">
            <div className="ml-10 flex items-baseline space-x-4">
              {navItems.map((item) => (
                <a
                  key={item.name}
                  href="#"
                  className="px-3 py-2 rounded-md text-sm font-medium text-gray-300 hover:bg-gray-700 hover:text-white transition duration-200 flex items-center"
                >
                  <item.icon className="w-4 h-4 mr-1" />
                  {item.name}
                </a>
              ))}
            </div>
          </div>

          {/* Botón de Menú Móvil */}
          <div className="md:hidden">
            <button
              onClick={() => setIsOpen(!isOpen)}
              className="bg-gray-800 p-2 rounded-md inline-flex items-center justify-center text-gray-400 hover:text-white hover:bg-gray-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-offset-gray-800 focus:ring-cyan-500"
            >
              {isOpen ? (
                <X className="block h-6 w-6" aria-hidden="true" />
              ) : (
                <Menu className="block h-6 w-6" aria-hidden="true" />
              )}
            </button>
          </div>
        </div>
      </div>

      {/* Menú Móvil Desplegable */}
      {isOpen && (
        <div className="md:hidden">
          <div className="px-2 pt-2 pb-3 space-y-1 sm:px-3 border-t border-gray-800">
            {navItems.map((item) => (
              <a
                key={item.name}
                href="#"
                className="block px-3 py-2 rounded-md text-base font-medium text-gray-300 hover:bg-gray-700 hover:text-white transition duration-200 flex items-center"
              >
                <item.icon className="w-4 h-4 mr-2" />
                {item.name}
              </a>
            ))}
          </div>
        </div>
      )}
    </nav>
  );
};

// Componente Principal de la Aplicación
const App = () => {
  const [loading, setLoading] = useState(true);

  // Simulación de carga para un efecto de fade-in
  useEffect(() => {
    const timer = setTimeout(() => setLoading(false), 500);
    return () => clearTimeout(timer);
  }, []);

  // Datos de ejemplo para las tarjetas de métricas
  const metrics = [
    {
      title: "Crecimiento Semanal",
      value: 12500,
      unit: "",
      icon: TrendingUp,
      change: 18.2,
    },
    {
      title: "Usuarios Activos",
      value: 875,
      unit: "",
      icon: Users,
      change: 4.5,
    },
    {
      title: "Calidad del Aire",
      value: 42,
      unit: " AQI",
      icon: Activity,
      change: -5.2,
    },
    {
      title: "Rendimiento (Score)",
      value: 9.8,
      unit: "/10",
      icon: Zap,
      change: 0.9,
    },
  ];

  return (
    // Contenedor principal con fondo de espacio fijo
    <div
      className={`min-h-screen font-sans relative overflow-hidden bg-gray-950 pt-16`}
    >
      {/* Configuración de Tailwind para la fuente Inter (Asumido) */}
      <style>{`
        @import url('https://fonts.googleapis.com/css2?family=Inter:wght@100..900&display=swap');
        body {
          font-family: 'Inter', sans-serif;
          margin: 0;
          padding: 0;
          overflow-x: hidden;
        }
      `}</style>

      {/* Barra de Navegación */}
      <Navbar />

      {/* Efecto Atmosférico (Estrellas/Partículas) */}
      <AtmosphereEffect />

      {/* Contenedor Principal Centrado - z-20 para estar por encima de los efectos de fondo */}
      <div
        className={`max-w-7xl mx-auto py-12 px-4 sm:px-6 lg:px-8 transition-opacity duration-1000 ${
          loading ? "opacity-0" : "opacity-100"
        } relative z-20`}
      >
        {/* Encabezado con Logo Circular */}
        <header className="mb-12 flex flex-col items-center text-center mt-8">
          <div className="w-48 h-48 mb-6 rounded-full overflow-hidden border-4 border-cyan-500/50 shadow-2xl shadow-cyan-500/30">
            <img
              src={CLOUDBUSTERS_LOGO_URL}
              alt="Cloudbusters Logo"
              className="w-full h-full object-cover mx-auto rounded-lg shadow-lg hover:scale-105 transition-transform duration-300"
            />
          </div>
          <h1 className="text-5xl font-extrabold text-white tracking-tight sm:text-6xl">
            Monitoreo{" "}
            <span className="text-transparent bg-clip-text bg-gradient-to-r from-cyan-400 to-indigo-500">
              Atmosférico
            </span>
          </h1>
          <p className="mt-4 text-xl text-gray-400 max-w-3xl">
            Sistema de predicción de calidad del aire con inteligencia artificial.
          </p>
        </header>

        {/* Grid de Métricas originales */}
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-12">
          {metrics.map((metric, index) => (
            <MetricCard key={index} {...metric} />
          ))}
        </div>

        {/* Sección de Status de Integración */}
        <div className="mb-12">
          <h2 className="text-3xl font-bold text-white mb-6 text-center">
            Sistema de Monitoreo Integrado
          </h2>
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
            <div className="relative bg-gray-800/70 p-6 rounded-2xl shadow-2xl backdrop-blur-sm border border-green-700/50">
              <div className="flex items-center justify-between mb-4">
                <h3 className="text-sm font-medium text-green-400 uppercase tracking-widest">
                  Frontend React
                </h3>
                <Activity className="w-5 h-5 text-green-400" />
              </div>
              <div className="text-2xl font-extrabold text-white mb-2">
                ✅ Funcionando
              </div>
              <div className="text-sm text-gray-400">
                Interfaz cargada correctamente
              </div>
            </div>

            <div className="relative bg-gray-800/70 p-6 rounded-2xl shadow-2xl backdrop-blur-sm border border-yellow-700/50">
              <div className="flex items-center justify-between mb-4">
                <h3 className="text-sm font-medium text-yellow-400 uppercase tracking-widest">
                  Backend Flask
                </h3>
                <Activity className="w-5 h-5 text-yellow-400" />
              </div>
              <div className="text-2xl font-extrabold text-white mb-2">
                🔄 Conectando
              </div>
              <div className="text-sm text-gray-400">
                API de IA preparándose
              </div>
            </div>

            <div className="relative bg-gray-800/70 p-6 rounded-2xl shadow-2xl backdrop-blur-sm border border-cyan-700/50">
              <div className="flex items-center justify-between mb-4">
                <h3 className="text-sm font-medium text-cyan-400 uppercase tracking-widest">
                  Modelo LSTM
                </h3>
                <Zap className="w-5 h-5 text-cyan-400" />
              </div>
              <div className="text-2xl font-extrabold text-white mb-2">
                🤖 Listo
              </div>
              <div className="text-sm text-gray-400">
                Red neuronal entrenada
              </div>
            </div>
          </div>
        </div>

        {/* Sección de Call to Action o Contenido Secundario */}
        <div className="mt-16 bg-gray-800/50 p-10 rounded-2xl border border-gray-700 flex flex-col md:flex-row items-center justify-between shadow-xl backdrop-blur-lg">
          <div className="md:max-w-lg">
            <h2 className="text-3xl font-bold text-white">
              Predicciones con IA.
            </h2>
            <p className="mt-2 text-gray-400">
              Nuestro sistema utiliza redes neuronales LSTM para predecir la calidad del aire
              basándose en datos históricos y en tiempo real.
            </p>
          </div>
          <button className="mt-6 md:mt-0 px-8 py-3 bg-cyan-500 text-gray-900 font-bold rounded-xl shadow-lg hover:bg-cyan-400 transition transform hover:-translate-y-0.5 duration-300">
            Ver Predicciones
          </button>
        </div>
      </div>
    </div>
  );
};

export default App;
