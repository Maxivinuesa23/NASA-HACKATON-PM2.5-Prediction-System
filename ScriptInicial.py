# ========================================
# SCRIPT PRINCIPAL DEL PREDICTOR DE CALIDAD DEL AIRE
# Coordinador principal que ejecuta todo el sistema
# ========================================

# CONFIGURACI√ìN DE IMPORTACIONES
import sys                             # Para manipular el sistema (rutas de Python)
import os                              # Para operaciones del sistema operativo (rutas de archivos)

# CONFIGURAR RUTA DE IMPORTACIONES
current_dir = os.path.dirname(os.path.abspath(__file__))  # Obtiene directorio actual del script
sys.path.insert(0, current_dir)       # Agrega directorio actual al path de Python

# IMPORTACIONES DE MACHINE LEARNING
import torch                           # Framework principal de machine learning
from torch.utils.data import DataLoader, random_split  # Para cargar datos y dividir en train/test
import numpy as np                     # Para operaciones matem√°ticas
import matplotlib.pyplot as plt        # Para crear gr√°ficos (opcional)
from datetime import datetime, timedelta  # Para manejo de fechas

# IMPORTACIONES DE NUESTRO PROYECTO
from AirVisualSimulator import generate_airvisual_data, AirQualityDataset, SEQ_LENGTH, N_FEATURES, SCALER, select_city
# ‚Üë Funciones para obtener datos y crear dataset
from ModeloLSTM import AirQualityPredictor, train_model, make_single_prediction, HIDDEN_DIM, NUM_LAYERS, OUTPUT_DIM, BATCH_SIZE, DROPOUT_RATE
# ‚Üë Modelo LSTM y funciones de entrenamiento

# CONFIGURACI√ìN GLOBAL
MODEL_PATH = 'air_quality_predictor_model.pth'  # Archivo donde se guarda el modelo entrenado

def plot_training_history(history):
    """
    FUNCI√ìN: Crea gr√°fico del progreso de entrenamiento del modelo
    PROP√ìSITO: Visualizar si el modelo est√° aprendiendo correctamente
    PAR√ÅMETRO: history (diccionario con p√©rdidas de entrenamiento y validaci√≥n)
    """
    plt.figure(figsize=(10, 5))        # Crea figura de 10x5 pulgadas
    plt.plot(history['train_loss'], label='P√©rdida Entrenamiento (MSE)', color='skyblue')  # L√≠nea azul para entrenamiento
    plt.plot(history['val_loss'], label='P√©rdida Validaci√≥n (MSE)', color='tomato')        # L√≠nea roja para validaci√≥n
    plt.title('Historial de P√©rdida del Modelo (Error Cuadr√°tico Medio)')  # T√≠tulo del gr√°fico
    plt.xlabel('√âpoca')                # Etiqueta eje X (cada √©poca = ciclo completo de entrenamiento)
    plt.ylabel('P√©rdida (MSE)')        # Etiqueta eje Y (menor p√©rdida = mejor modelo)
    plt.legend()                       # Muestra leyenda con colores
    plt.grid(True)                     # Agrega cuadr√≠cula para facilitar lectura
    plt.show()                         # Muestra el gr√°fico en pantalla

def plot_predictions(targets_scaled, predictions_scaled, title="Predicciones vs. Reales (Conjunto de Validaci√≥n)"):
    """
    FUNCI√ìN: Crea gr√°fico comparando predicciones del modelo vs valores reales
    PROP√ìSITO: Verificar visualmente qu√© tan bien predice el modelo
    PAR√ÅMETROS: targets_scaled (valores reales), predictions_scaled (predicciones del modelo)
    """
    # IMPORTAR SCALER PARA DESNORMALIZAR
    from AirVisualSimulator import SCALER  # Importa el objeto que normaliz√≥ los datos
    
    # DESNORMALIZAR DATOS (convertir de 0-1 de vuelta a Œºg/m¬≥)
    mean_pm25 = SCALER.mean_[1]        # Media usada para normalizar PM2.5 (columna 1)
    scale_pm25 = SCALER.scale_[1]      # Escala usada para normalizar PM2.5
    
    # F√ìRMULA DE DESNORMALIZACI√ìN: valor_original = (valor_normalizado * escala) + media
    targets = (targets_scaled * scale_pm25) + mean_pm25      # Valores reales desnormalizados
    predictions = (predictions_scaled * scale_pm25) + mean_pm25  # Predicciones desnormalizadas
    
    # CREAR GR√ÅFICO
    plt.figure(figsize=(12, 6))        # Figura de 12x6 pulgadas
    plt.plot(targets, label='Valores Reales (PM2.5)', color='darkgreen', linewidth=2)      # L√≠nea verde gruesa = real
    plt.plot(predictions, label='Predicciones del Modelo', color='orange', linestyle='--', alpha=0.7)  # L√≠nea naranja punteada = predicci√≥n
    
    # CONFIGURAR GR√ÅFICO
    plt.title(title)                   # T√≠tulo personalizable
    plt.xlabel('Muestra (D√≠a)')        # Eje X = d√≠as
    plt.ylabel('Concentraci√≥n de PM2.5 ($\\mu g/m^3$)')  # Eje Y = concentraci√≥n en Œºg/m¬≥
    plt.legend()                       # Leyenda
    plt.grid(True, linestyle=':', alpha=0.6)  # Cuadr√≠cula punteada suave
    plt.show()                         # Muestra gr√°fico


def main():
    """
    FUNCI√ìN PRINCIPAL: Controla todo el flujo del programa
    PROP√ìSITO: Coordinar datos, entrenamiento y predicci√≥n
    FLUJO: 1¬∞ Obtener datos ‚Üí 2¬∞ Entrenar modelo ‚Üí 3¬∞ Predecir ma√±ana
    """
    
    # CONFIGURAR FECHAS
    today = datetime.now().date()      # Fecha de hoy
    tomorrow = today + timedelta(days=1)  # Fecha de ma√±ana
    
    # MOSTRAR CABECERA DEL PROGRAMA
    print("ü§ñ PREDICTOR DE CALIDAD DEL AIRE")
    print("="*50)
    print(f"üìÖ Fecha actual: {today}")
    print(f"üîÆ Predicci√≥n para: {tomorrow}")
    print("="*50)
    
    # PASO 1: SELECCI√ìN DE CIUDAD
    selected_city = select_city()      # Llama funci√≥n que muestra men√∫ y obtiene elecci√≥n del usuario
    
    # PASO 2: OBTENCI√ìN DE DATOS
    print("\nüìä Obteniendo datos...")  # Muestra mensaje al usuario
    raw_data_scaled = generate_airvisual_data(selected_city)  # Obtiene datos reales o sint√©ticos
    
    # VERIFICAR QUE HAY SUFICIENTES DATOS
    if raw_data_scaled is not None and len(raw_data_scaled) >= SEQ_LENGTH + 50:  # Necesita al menos 60 d√≠as
        print("‚úÖ Datos obtenidos exitosamente!")  # Confirma √©xito
    else:                              # Si no hay suficientes datos
        print("‚ùå Error: No se pudieron obtener suficientes datos")
        return                         # Termina la funci√≥n (sale del programa)
    
    # PASO 3: PREPARAR DATOS PARA MACHINE LEARNING
    full_dataset = AirQualityDataset(raw_data_scaled, SEQ_LENGTH)  # Convierte DataFrame a Dataset de PyTorch
    
    # DIVIDIR DATOS: 80% entrenamiento, 20% validaci√≥n
    train_size = int(0.8 * len(full_dataset))  # 80% de los datos para entrenar
    val_size = len(full_dataset) - train_size  # 20% restante para validar
    train_dataset, val_dataset = random_split(full_dataset, [train_size, val_size])  # Divisi√≥n aleatoria

    # CREAR CARGADORES DE DATOS (DataLoaders)
    train_loader = DataLoader(train_dataset, batch_size=BATCH_SIZE, shuffle=True)   # Entrenamiento: mezcla datos
    val_loader = DataLoader(val_dataset, batch_size=BATCH_SIZE, shuffle=False)      # Validaci√≥n: orden fijo

    # MOSTRAR INFORMACI√ìN DE DATOS
    print(f"üìà Entrenamiento: {len(train_dataset)} secuencias")  # Cu√°ntas secuencias para entrenar
    print(f"üìä Validaci√≥n: {len(val_dataset)} secuencias")      # Cu√°ntas secuencias para validar
    
    # PASO 4: CREAR Y CARGAR MODELO DE MACHINE LEARNING
    print("\nüß† Preparando modelo LSTM...")  # Informa al usuario
    model = AirQualityPredictor(N_FEATURES, HIDDEN_DIM, NUM_LAYERS, OUTPUT_DIM, DROPOUT_RATE)  # Crea modelo LSTM
    
    try:                               # Intenta cargar modelo ya entrenado
        model.load_state_dict(torch.load(MODEL_PATH))  # Carga pesos del archivo .pth
        print("‚úÖ Modelo cargado desde archivo")  # Confirma carga exitosa
    except FileNotFoundError:          # Si no existe archivo del modelo
        print("üîÑ Entrenando nuevo modelo...")  # Informa que va a entrenar
        train_model(model, train_loader, val_loader)  # Entrena modelo desde cero
        
        # GUARDAR MODELO ENTRENADO
        torch.save(model.state_dict(), MODEL_PATH)  # Guarda pesos en archivo .pth
        print("üíæ Modelo guardado")            # Confirma guardado

    # PASO 5: REALIZAR PREDICCI√ìN PARA MA√ëANA
    print(f"\nüîÆ PREDICCI√ìN PARA {selected_city['name'].upper()} - {tomorrow}")
    print("-"*50)
    
    # OBTENER √öLTIMA SECUENCIA DE DATOS (para predecir ma√±ana)
    last_sequence_data, _ = full_dataset[len(full_dataset)-1]  # √öltimos 10 d√≠as del dataset
    prediction_sequence = last_sequence_data.cpu().numpy()    # Convierte a array de NumPy
    
    # OBTENER VALOR REAL DEL √öLTIMO D√çA (para referencia)
    from AirVisualSimulator import SCALER  # Importa objeto normalizador
    if SCALER is not None:             # Si el normalizador existe
        # DESNORMALIZAR EL √öLTIMO VALOR
        last_pm25_scaled = full_dataset.data[-1][1].item()  # PM2.5 del √∫ltimo d√≠a (columna 1, normalizado)
        mean_pm25 = SCALER.mean_[1]    # Media usada para normalizar
        scale_pm25 = SCALER.scale_[1]  # Escala usada para normalizar
        real_last_value = (last_pm25_scaled * scale_pm25) + mean_pm25  # Desnormaliza: valor real
    else:                              # Si no hay normalizador
        real_last_value = 25.0         # Valor por defecto
    
    # HACER PREDICCI√ìN PARA MA√ëANA
    predicted_pm25 = make_single_prediction(model, prediction_sequence)  # Llama al modelo con √∫ltimos 10 d√≠as
    
    # MOSTRAR RESULTADOS AL USUARIO
    print(f"üìä PM2.5 actual (hoy): {real_last_value:.1f} Œºg/m¬≥")    # Valor de hoy (.1f = 1 decimal)
    print(f"üéØ PM2.5 predicho (ma√±ana): {predicted_pm25:.1f} Œºg/m¬≥")  # Predicci√≥n para ma√±ana
    
    # CLASIFICAR CALIDAD DEL AIRE SEG√öN VALOR PREDICHO
    if predicted_pm25 <= 12:           # Rango 1: Excelente
        nivel = "BUENA üü¢"            # Verde = aire limpio
    elif predicted_pm25 <= 35:         # Rango 2: Moderado
        nivel = "MODERADA üü°"         # Amarillo = aceptable
    elif predicted_pm25 <= 55:         # Rango 3: Da√±ino para sensibles
        nivel = "DA√ëINA GRUPOS SENSIBLES üü†"  # Naranja = cuidado
    elif predicted_pm25 <= 150:        # Rango 4: Da√±ino para todos
        nivel = "DA√ëINA üî¥"            # Rojo = peligroso
    else:                              # Rango 5: Muy da√±ino
        nivel = "MUY DA√ëINA üü£"        # Morado = emergencia
    
    print(f"üìã Calidad del aire: {nivel}")  # Muestra clasificaci√≥n con emoji
    
    # CALCULAR TENDENCIA (comparar hoy vs ma√±ana)
    change = predicted_pm25 - real_last_value  # Diferencia: positivo = empeora, negativo = mejora
    if abs(change) < 2:                # Si el cambio es menor a 2 Œºg/m¬≥
        trend = "ESTABLE ‚û°Ô∏è"            # Flecha horizontal = sin cambios significativos
    elif change > 0:                   # Si el cambio es positivo (aumenta)
        trend = f"EMPEORANDO ‚¨ÜÔ∏è (+{change:.1f})"  # Flecha arriba + cantidad
    else:                              # Si el cambio es negativo (disminuye)
        trend = f"MEJORANDO ‚¨áÔ∏è ({change:.1f})"    # Flecha abajo + cantidad (ya tiene signo -)
    
    print(f"üìà Tendencia: {trend}")      # Muestra tendencia con flecha
    
    # FINALIZACI√ìN DEL PROGRAMA
    print("\n" + "="*50)              # L√≠nea separadora
    print("‚úÖ Predicci√≥n completada!")    # Mensaje de √©xito
    
if __name__ == '__main__':             # Si este archivo se ejecuta directamente (no se importa)
    main()                             # Llama a la funci√≥n principal
